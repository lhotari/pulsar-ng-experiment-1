/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'java'
    id 'idea'
    id 'org.apache.pulsar.experiment.java-application-conventions'
    id 'org.springframework.boot' version '2.7.5'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.6"
}

sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.apache.ratis:ratis-client:2.4.0'
    implementation 'org.apache.ratis:ratis-server:2.4.0'
    implementation 'org.apache.ratis:ratis-grpc:2.4.0'
    implementation 'org.apache.ratis:ratis-common:2.4.0'
    implementation 'org.apache.ratis:ratis-proto:2.4.0'
    implementation 'org.apache.ratis:ratis-metrics:2.4.0'
    implementation 'io.dropwizard.metrics:metrics-jvm:3.2.5'
    implementation 'io.dropwizard.metrics:metrics-core:3.2.5'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    implementation 'com.google.guava:guava:31.1-jre'
}

application {
    // Define the main class for the application.
    mainClass = rootProject.hasProperty('app') ? rootProject.property('app') : 'org.apache.pulsar.experiment.shard.app.ShardApp'
}

bootRun {
    File asyncProfilerPath=rootProject.hasProperty('asyncProfilerPath') ? new File(rootProject.property('asyncProfilerPath')) : new File(System.getProperty("user.home"), "tools/async-profiler/build/libasyncProfiler.so")
    if (asyncProfilerPath.exists()) {
        def profilerDir = new File(rootProject.buildDir, "profiler")
        profilerDir.mkdirs()
        def profilingFormat = rootProject.findProperty("profilingFormat") ?: 'jfr'
        def profilingConfig
        switch (rootProject.findProperty('profilingType')) {
            case "stacktraces":
                profilingConfig = "event=Java_java_lang_Throwable_fillInStackTrace"
                break
            case "cpu":
                profilingConfig = "event=cpu"
                break
            case "wall":
                profilingConfig = "event=wall"
                break
            default:
                if (profilingFormat == "jfr") {
                    profilingConfig = "event=cpu,alloc=2m,lock=10ms"
                } else {
                    profilingConfig = "event=cpu"
                }
        }
        jvmArgs "-agentpath:${asyncProfilerPath.absolutePath}=start,${profilingConfig},file=${profilerDir}/profile_${new Date().format("yyyyMMddHHmmssSSS")}.${profilingFormat}"
    }
}


import org.jetbrains.gradle.ext.ModuleRef

rootProject.idea.project.settings.runConfigurations {
    for (int i = 0; i < 3; i++) {
        "ShardApp peer${i}"(org.jetbrains.gradle.ext.Application) {
            mainClass = 'org.apache.pulsar.experiment.shard.app.ShardApp'
            programParameters = "--shardapp.peer_index=${i}"
            moduleName = new ModuleRef(project, project.sourceSets.main).toModuleName()
        }
    }

    "AdminApp"(org.jetbrains.gradle.ext.Application) {
        mainClass = 'org.apache.pulsar.experiment.admin.app.AdminApp'
        programParameters = "--server.port=8080"
        moduleName = new ModuleRef(project, project.sourceSets.main).toModuleName()
    }
}